// autogenerated 2013-05-21 11:39:03. See TU/clang.R
void
showSizeofs()
{
fprintf(stdout, "CUDAStructSizes = c(\n");
fprintf(stdout, " int = %dL,\n", (int) sizeof(int));
fprintf(stdout, " long = %dL,\n", (int) sizeof(long));
fprintf(stdout, " short = %dL,\n", (int) sizeof(short));
fprintf(stdout, " char = %dL,\n", (int) sizeof(char));
fprintf(stdout, " float = %dL,\n", (int) sizeof(float));
fprintf(stdout, " double = %dL,\n", (int) sizeof(double));
fprintf(stdout, " CUuuid_st = %dL,\n", (int) sizeof(CUuuid_st));
fprintf(stdout, " CUuuid = %dL,\n", (int) sizeof(CUuuid));
fprintf(stdout, " CUuuid_st = %dL,\n", (int) sizeof(CUuuid_st));
fprintf(stdout, " CUipcEventHandle_st = %dL,\n", (int) sizeof(CUipcEventHandle_st));
fprintf(stdout, " CUipcEventHandle = %dL,\n", (int) sizeof(CUipcEventHandle));
fprintf(stdout, " CUipcEventHandle_st = %dL,\n", (int) sizeof(CUipcEventHandle_st));
fprintf(stdout, " CUipcMemHandle_st = %dL,\n", (int) sizeof(CUipcMemHandle_st));
fprintf(stdout, " CUipcMemHandle = %dL,\n", (int) sizeof(CUipcMemHandle));
fprintf(stdout, " CUipcMemHandle_st = %dL,\n", (int) sizeof(CUipcMemHandle_st));
fprintf(stdout, " CUdevprop_st = %dL,\n", (int) sizeof(CUdevprop_st));
fprintf(stdout, " CUdevprop = %dL,\n", (int) sizeof(CUdevprop));
fprintf(stdout, " CUdevprop_st = %dL,\n", (int) sizeof(CUdevprop_st));
fprintf(stdout, " CUDA_MEMCPY2D_st = %dL,\n", (int) sizeof(CUDA_MEMCPY2D_st));
fprintf(stdout, " CUDA_MEMCPY2D = %dL,\n", (int) sizeof(CUDA_MEMCPY2D));
fprintf(stdout, " CUDA_MEMCPY2D_st = %dL,\n", (int) sizeof(CUDA_MEMCPY2D_st));
fprintf(stdout, " CUDA_MEMCPY3D_st = %dL,\n", (int) sizeof(CUDA_MEMCPY3D_st));
fprintf(stdout, " CUDA_MEMCPY3D = %dL,\n", (int) sizeof(CUDA_MEMCPY3D));
fprintf(stdout, " CUDA_MEMCPY3D_st = %dL,\n", (int) sizeof(CUDA_MEMCPY3D_st));
fprintf(stdout, " CUDA_MEMCPY3D_PEER_st = %dL,\n", (int) sizeof(CUDA_MEMCPY3D_PEER_st));
fprintf(stdout, " CUDA_MEMCPY3D_PEER = %dL,\n", (int) sizeof(CUDA_MEMCPY3D_PEER));
fprintf(stdout, " CUDA_MEMCPY3D_PEER_st = %dL,\n", (int) sizeof(CUDA_MEMCPY3D_PEER_st));
fprintf(stdout, " CUDA_ARRAY_DESCRIPTOR_st = %dL,\n", (int) sizeof(CUDA_ARRAY_DESCRIPTOR_st));
fprintf(stdout, " CUDA_ARRAY_DESCRIPTOR = %dL,\n", (int) sizeof(CUDA_ARRAY_DESCRIPTOR));
fprintf(stdout, " CUDA_ARRAY_DESCRIPTOR_st = %dL,\n", (int) sizeof(CUDA_ARRAY_DESCRIPTOR_st));
fprintf(stdout, " CUDA_ARRAY3D_DESCRIPTOR_st = %dL,\n", (int) sizeof(CUDA_ARRAY3D_DESCRIPTOR_st));
fprintf(stdout, " CUDA_ARRAY3D_DESCRIPTOR = %dL,\n", (int) sizeof(CUDA_ARRAY3D_DESCRIPTOR));
fprintf(stdout, " CUDA_ARRAY3D_DESCRIPTOR_st = %dL,\n", (int) sizeof(CUDA_ARRAY3D_DESCRIPTOR_st));
fprintf(stdout, " CUDA_RESOURCE_DESC_st = %dL,\n", (int) sizeof(CUDA_RESOURCE_DESC_st));
fprintf(stdout, " CUDA_RESOURCE_DESC = %dL,\n", (int) sizeof(CUDA_RESOURCE_DESC));
fprintf(stdout, " CUDA_RESOURCE_DESC_st = %dL,\n", (int) sizeof(CUDA_RESOURCE_DESC_st));
fprintf(stdout, " CUDA_TEXTURE_DESC_st = %dL,\n", (int) sizeof(CUDA_TEXTURE_DESC_st));
fprintf(stdout, " CUDA_TEXTURE_DESC = %dL,\n", (int) sizeof(CUDA_TEXTURE_DESC));
fprintf(stdout, " CUDA_TEXTURE_DESC_st = %dL,\n", (int) sizeof(CUDA_TEXTURE_DESC_st));
fprintf(stdout, " CUDA_RESOURCE_VIEW_DESC_st = %dL,\n", (int) sizeof(CUDA_RESOURCE_VIEW_DESC_st));
fprintf(stdout, " CUDA_RESOURCE_VIEW_DESC = %dL,\n", (int) sizeof(CUDA_RESOURCE_VIEW_DESC));
fprintf(stdout, " CUDA_RESOURCE_VIEW_DESC_st = %dL,\n", (int) sizeof(CUDA_RESOURCE_VIEW_DESC_st));
fprintf(stdout, " CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st = %dL,\n", (int) sizeof(CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st));
fprintf(stdout, " CUDA_POINTER_ATTRIBUTE_P2P_TOKENS = %dL,\n", (int) sizeof(CUDA_POINTER_ATTRIBUTE_P2P_TOKENS));
fprintf(stdout, " CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st = %dL,\n", (int) sizeof(CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st));
fprintf(stdout, " cudaChannelFormatDesc = %dL,\n", (int) sizeof(cudaChannelFormatDesc));
fprintf(stdout, " cudaPitchedPtr = %dL,\n", (int) sizeof(cudaPitchedPtr));
fprintf(stdout, " cudaExtent = %dL,\n", (int) sizeof(cudaExtent));
fprintf(stdout, " cudaPos = %dL,\n", (int) sizeof(cudaPos));
fprintf(stdout, " cudaMemcpy3DParms = %dL,\n", (int) sizeof(cudaMemcpy3DParms));
fprintf(stdout, " cudaMemcpy3DPeerParms = %dL,\n", (int) sizeof(cudaMemcpy3DPeerParms));
fprintf(stdout, " cudaResourceDesc = %dL,\n", (int) sizeof(cudaResourceDesc));
fprintf(stdout, " cudaResourceViewDesc = %dL,\n", (int) sizeof(cudaResourceViewDesc));
fprintf(stdout, " cudaPointerAttributes = %dL,\n", (int) sizeof(cudaPointerAttributes));
fprintf(stdout, " cudaFuncAttributes = %dL,\n", (int) sizeof(cudaFuncAttributes));
fprintf(stdout, " cudaDeviceProp = %dL,\n", (int) sizeof(cudaDeviceProp));
fprintf(stdout, " cudaIpcEventHandle_st = %dL,\n", (int) sizeof(cudaIpcEventHandle_st));
fprintf(stdout, " cudaIpcEventHandle_t = %dL,\n", (int) sizeof(cudaIpcEventHandle_t));
fprintf(stdout, " cudaIpcEventHandle_st = %dL,\n", (int) sizeof(cudaIpcEventHandle_st));
fprintf(stdout, " cudaIpcMemHandle_st = %dL,\n", (int) sizeof(cudaIpcMemHandle_st));
fprintf(stdout, " cudaIpcMemHandle_t = %dL,\n", (int) sizeof(cudaIpcMemHandle_t));
fprintf(stdout, " cudaIpcMemHandle_st = %dL,\n", (int) sizeof(cudaIpcMemHandle_st));
fprintf(stdout, " cudaUUID_t = %dL,\n", (int) sizeof(cudaUUID_t));
fprintf(stdout, " surfaceReference = %dL,\n", (int) sizeof(surfaceReference));
fprintf(stdout, " textureReference = %dL,\n", (int) sizeof(textureReference));
fprintf(stdout, " cudaTextureDesc = %dL,\n", (int) sizeof(cudaTextureDesc));
fprintf(stdout, " char1 = %dL,\n", (int) sizeof(char1));
fprintf(stdout, " uchar1 = %dL,\n", (int) sizeof(uchar1));
fprintf(stdout, " char2 = %dL,\n", (int) sizeof(char2));
fprintf(stdout, " uchar2 = %dL,\n", (int) sizeof(uchar2));
fprintf(stdout, " char3 = %dL,\n", (int) sizeof(char3));
fprintf(stdout, " uchar3 = %dL,\n", (int) sizeof(uchar3));
fprintf(stdout, " char4 = %dL,\n", (int) sizeof(char4));
fprintf(stdout, " uchar4 = %dL,\n", (int) sizeof(uchar4));
fprintf(stdout, " short1 = %dL,\n", (int) sizeof(short1));
fprintf(stdout, " ushort1 = %dL,\n", (int) sizeof(ushort1));
fprintf(stdout, " short2 = %dL,\n", (int) sizeof(short2));
fprintf(stdout, " ushort2 = %dL,\n", (int) sizeof(ushort2));
fprintf(stdout, " short3 = %dL,\n", (int) sizeof(short3));
fprintf(stdout, " ushort3 = %dL,\n", (int) sizeof(ushort3));
fprintf(stdout, " short4 = %dL,\n", (int) sizeof(short4));
fprintf(stdout, " ushort4 = %dL,\n", (int) sizeof(ushort4));
fprintf(stdout, " int1 = %dL,\n", (int) sizeof(int1));
fprintf(stdout, " uint1 = %dL,\n", (int) sizeof(uint1));
fprintf(stdout, " int2 = %dL,\n", (int) sizeof(int2));
fprintf(stdout, " uint2 = %dL,\n", (int) sizeof(uint2));
fprintf(stdout, " int3 = %dL,\n", (int) sizeof(int3));
fprintf(stdout, " uint3 = %dL,\n", (int) sizeof(uint3));
fprintf(stdout, " int4 = %dL,\n", (int) sizeof(int4));
fprintf(stdout, " uint4 = %dL,\n", (int) sizeof(uint4));
fprintf(stdout, " long1 = %dL,\n", (int) sizeof(long1));
fprintf(stdout, " ulong1 = %dL,\n", (int) sizeof(ulong1));
fprintf(stdout, " long2 = %dL,\n", (int) sizeof(long2));
fprintf(stdout, " ulong2 = %dL,\n", (int) sizeof(ulong2));
fprintf(stdout, " long3 = %dL,\n", (int) sizeof(long3));
fprintf(stdout, " ulong3 = %dL,\n", (int) sizeof(ulong3));
fprintf(stdout, " long4 = %dL,\n", (int) sizeof(long4));
fprintf(stdout, " ulong4 = %dL,\n", (int) sizeof(ulong4));
fprintf(stdout, " float1 = %dL,\n", (int) sizeof(float1));
fprintf(stdout, " float2 = %dL,\n", (int) sizeof(float2));
fprintf(stdout, " float3 = %dL,\n", (int) sizeof(float3));
fprintf(stdout, " float4 = %dL,\n", (int) sizeof(float4));
fprintf(stdout, " longlong1 = %dL,\n", (int) sizeof(longlong1));
fprintf(stdout, " ulonglong1 = %dL,\n", (int) sizeof(ulonglong1));
fprintf(stdout, " longlong2 = %dL,\n", (int) sizeof(longlong2));
fprintf(stdout, " ulonglong2 = %dL,\n", (int) sizeof(ulonglong2));
fprintf(stdout, " longlong3 = %dL,\n", (int) sizeof(longlong3));
fprintf(stdout, " ulonglong3 = %dL,\n", (int) sizeof(ulonglong3));
fprintf(stdout, " longlong4 = %dL,\n", (int) sizeof(longlong4));
fprintf(stdout, " ulonglong4 = %dL,\n", (int) sizeof(ulonglong4));
fprintf(stdout, " double1 = %dL,\n", (int) sizeof(double1));
fprintf(stdout, " double2 = %dL,\n", (int) sizeof(double2));
fprintf(stdout, " double3 = %dL,\n", (int) sizeof(double3));
fprintf(stdout, " double4 = %dL,\n", (int) sizeof(double4));
fprintf(stdout, " char1 = %dL,\n", (int) sizeof(char1));
fprintf(stdout, " uchar1 = %dL,\n", (int) sizeof(uchar1));
fprintf(stdout, " char2 = %dL,\n", (int) sizeof(char2));
fprintf(stdout, " uchar2 = %dL,\n", (int) sizeof(uchar2));
fprintf(stdout, " char3 = %dL,\n", (int) sizeof(char3));
fprintf(stdout, " uchar3 = %dL,\n", (int) sizeof(uchar3));
fprintf(stdout, " char4 = %dL,\n", (int) sizeof(char4));
fprintf(stdout, " uchar4 = %dL,\n", (int) sizeof(uchar4));
fprintf(stdout, " short1 = %dL,\n", (int) sizeof(short1));
fprintf(stdout, " ushort1 = %dL,\n", (int) sizeof(ushort1));
fprintf(stdout, " short2 = %dL,\n", (int) sizeof(short2));
fprintf(stdout, " ushort2 = %dL,\n", (int) sizeof(ushort2));
fprintf(stdout, " short3 = %dL,\n", (int) sizeof(short3));
fprintf(stdout, " ushort3 = %dL,\n", (int) sizeof(ushort3));
fprintf(stdout, " short4 = %dL,\n", (int) sizeof(short4));
fprintf(stdout, " ushort4 = %dL,\n", (int) sizeof(ushort4));
fprintf(stdout, " int1 = %dL,\n", (int) sizeof(int1));
fprintf(stdout, " uint1 = %dL,\n", (int) sizeof(uint1));
fprintf(stdout, " int2 = %dL,\n", (int) sizeof(int2));
fprintf(stdout, " uint2 = %dL,\n", (int) sizeof(uint2));
fprintf(stdout, " int3 = %dL,\n", (int) sizeof(int3));
fprintf(stdout, " uint3 = %dL,\n", (int) sizeof(uint3));
fprintf(stdout, " int4 = %dL,\n", (int) sizeof(int4));
fprintf(stdout, " uint4 = %dL,\n", (int) sizeof(uint4));
fprintf(stdout, " long1 = %dL,\n", (int) sizeof(long1));
fprintf(stdout, " ulong1 = %dL,\n", (int) sizeof(ulong1));
fprintf(stdout, " long2 = %dL,\n", (int) sizeof(long2));
fprintf(stdout, " ulong2 = %dL,\n", (int) sizeof(ulong2));
fprintf(stdout, " long3 = %dL,\n", (int) sizeof(long3));
fprintf(stdout, " ulong3 = %dL,\n", (int) sizeof(ulong3));
fprintf(stdout, " long4 = %dL,\n", (int) sizeof(long4));
fprintf(stdout, " ulong4 = %dL,\n", (int) sizeof(ulong4));
fprintf(stdout, " float1 = %dL,\n", (int) sizeof(float1));
fprintf(stdout, " float2 = %dL,\n", (int) sizeof(float2));
fprintf(stdout, " float3 = %dL,\n", (int) sizeof(float3));
fprintf(stdout, " float4 = %dL,\n", (int) sizeof(float4));
fprintf(stdout, " longlong1 = %dL,\n", (int) sizeof(longlong1));
fprintf(stdout, " ulonglong1 = %dL,\n", (int) sizeof(ulonglong1));
fprintf(stdout, " longlong2 = %dL,\n", (int) sizeof(longlong2));
fprintf(stdout, " ulonglong2 = %dL,\n", (int) sizeof(ulonglong2));
fprintf(stdout, " longlong3 = %dL,\n", (int) sizeof(longlong3));
fprintf(stdout, " ulonglong3 = %dL,\n", (int) sizeof(ulonglong3));
fprintf(stdout, " longlong4 = %dL,\n", (int) sizeof(longlong4));
fprintf(stdout, " ulonglong4 = %dL,\n", (int) sizeof(ulonglong4));
fprintf(stdout, " double1 = %dL,\n", (int) sizeof(double1));
fprintf(stdout, " double2 = %dL,\n", (int) sizeof(double2));
fprintf(stdout, " double3 = %dL,\n", (int) sizeof(double3));
fprintf(stdout, " double4 = %dL,\n", (int) sizeof(double4));
fprintf(stdout, " dim3 = %dL,\n", (int) sizeof(dim3));
fprintf(stdout, " dim3 = %dL,\n", (int) sizeof(dim3));
fprintf(stdout, " curandDistributionShift_st = %dL,\n", (int) sizeof(curandDistributionShift_st));
fprintf(stdout, " curandDistributionM2Shift_st = %dL,\n", (int) sizeof(curandDistributionM2Shift_st));
fprintf(stdout, " curandHistogramM2_st = %dL,\n", (int) sizeof(curandHistogramM2_st));
fprintf(stdout, " curandDiscreteDistribution_st = %dL,\n", (int) sizeof(curandDiscreteDistribution_st));
fprintf(stdout, " curandDistributionShift_st = %dL,\n", (int) sizeof(curandDistributionShift_st));
fprintf(stdout, " curandHistogramM2_st = %dL,\n", (int) sizeof(curandHistogramM2_st));
fprintf(stdout, " curandDistributionM2Shift_st = %dL,\n", (int) sizeof(curandDistributionM2Shift_st));
fprintf(stdout, " curandDiscreteDistribution_st = %dL,\n", (int) sizeof(curandDiscreteDistribution_st));
fprintf(stdout, " mtgp32_params_fast = %dL,\n", (int) sizeof(mtgp32_params_fast));
fprintf(stdout, " mtgp32_params_fast = %dL,\n", (int) sizeof(mtgp32_params_fast));
fprintf(stdout, " mtgp32_params_fast_t = %dL,\n", (int) sizeof(mtgp32_params_fast_t));
fprintf(stdout, " mtgp32_kernel_params = %dL,\n", (int) sizeof(mtgp32_kernel_params));
fprintf(stdout, " mtgp32_kernel_params = %dL,\n", (int) sizeof(mtgp32_kernel_params));
fprintf(stdout, " mtgp32_kernel_params_t = %dL,\n", (int) sizeof(mtgp32_kernel_params_t));
fprintf(stdout, " curandStateMtgp32 = %dL,\n", (int) sizeof(curandStateMtgp32));
fprintf(stdout, " curandStateMtgp32 = %dL,\n", (int) sizeof(curandStateMtgp32));
fprintf(stdout, " curandStateMtgp32_t = %dL,\n", (int) sizeof(curandStateMtgp32_t));
fprintf(stdout, " curandStateTest = %dL,\n", (int) sizeof(curandStateTest));
fprintf(stdout, " curandStateTest_t = %dL,\n", (int) sizeof(curandStateTest_t));
fprintf(stdout, " curandStateXORWOW = %dL,\n", (int) sizeof(curandStateXORWOW));
fprintf(stdout, " curandStateXORWOW = %dL,\n", (int) sizeof(curandStateXORWOW));
fprintf(stdout, " curandStateXORWOW_t = %dL,\n", (int) sizeof(curandStateXORWOW_t));
fprintf(stdout, " curandStateMRG32k3a = %dL,\n", (int) sizeof(curandStateMRG32k3a));
fprintf(stdout, " curandStateMRG32k3a = %dL,\n", (int) sizeof(curandStateMRG32k3a));
fprintf(stdout, " curandStateMRG32k3a_t = %dL,\n", (int) sizeof(curandStateMRG32k3a_t));
fprintf(stdout, " curandStateSobol32 = %dL,\n", (int) sizeof(curandStateSobol32));
fprintf(stdout, " curandStateSobol32 = %dL,\n", (int) sizeof(curandStateSobol32));
fprintf(stdout, " curandStateSobol32_t = %dL,\n", (int) sizeof(curandStateSobol32_t));
fprintf(stdout, " curandStateScrambledSobol32 = %dL,\n", (int) sizeof(curandStateScrambledSobol32));
fprintf(stdout, " curandStateScrambledSobol32 = %dL,\n", (int) sizeof(curandStateScrambledSobol32));
fprintf(stdout, " curandStateScrambledSobol32_t = %dL,\n", (int) sizeof(curandStateScrambledSobol32_t));
fprintf(stdout, " curandStateSobol64 = %dL,\n", (int) sizeof(curandStateSobol64));
fprintf(stdout, " curandStateSobol64 = %dL,\n", (int) sizeof(curandStateSobol64));
fprintf(stdout, " curandStateSobol64_t = %dL,\n", (int) sizeof(curandStateSobol64_t));
fprintf(stdout, " curandStateScrambledSobol64 = %dL,\n", (int) sizeof(curandStateScrambledSobol64));
fprintf(stdout, " curandStateScrambledSobol64 = %dL,\n", (int) sizeof(curandStateScrambledSobol64));
fprintf(stdout, " curandStateScrambledSobol64_t = %dL,\n", (int) sizeof(curandStateScrambledSobol64_t));
fprintf(stdout, " curandState_t = %dL,\n", (int) sizeof(curandState_t));
fprintf(stdout, " curandState = %dL\n", (int) sizeof(curandState));
fprintf(stdout, ")\n");
}
